<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>noc的手记</title>
  
  <subtitle>hello world</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://noncover.github.io/"/>
  <updated>2020-05-08T03:40:23.726Z</updated>
  <id>https://noncover.github.io/</id>
  
  <author>
    <name>NonCover</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何优雅的进行幂计算</title>
    <link href="https://noncover.github.io/2020/05/08/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E8%BF%9B%E8%A1%8C%E5%B9%82%E8%AE%A1%E7%AE%97/"/>
    <id>https://noncover.github.io/2020/05/08/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E8%BF%9B%E8%A1%8C%E5%B9%82%E8%AE%A1%E7%AE%97/</id>
    <published>2020-05-08T03:39:20.000Z</published>
    <updated>2020-05-08T03:40:23.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="朴素算法"><a href="#朴素算法" class="headerlink" title="朴素算法"></a>朴素算法</h1><p>幂计算最简单也最容易想到的算法当然是朴素算法了，不说了，直接看代码</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (m &gt; <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">ans *= n;</span><br><span class="line">m--;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>时间复杂度：O（n）</p><h1 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h1><p>快速幂其实就是用了二分的思想，我们来看 2^10如何计算的</p><p>2^10 = 2 ^ 5 x 2 ^ 5 = 32 x 32 =1024</p><p>2 ^ 5 = 2 ^ 2 x 2 ^ 2 x 2 = 4 x 4 x 2 = 32</p><p>2 ^ 2 = 2 x 2 = 4</p><p>当然，我们遇到幂为奇数的时候，就用一个变量来保存答案</p><p>当计算10次方的时候，我们也只计算了3次，算法复杂度从 O(n) 下降到了 O(log2n)</p><p>整理思路如下步骤；</p><p>\1. 把幂对半分</p><p>\2. 遇到幂为奇数时，就更新答案</p><p>\3. 幂直到为0，就返回答案</p><p>代码如下：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> tmp = n;</span><br><span class="line"><span class="keyword">while</span> (m &gt; <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (m &amp; <span class="number">1</span>) ans *= tmp;</span><br><span class="line">tmp *= tmp;</span><br><span class="line">m &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>需要注意的是，当幂很大时，我们会造成整形溢出，所以一般用 long或者long long的数据类型</strong></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;朴素算法&quot;&gt;&lt;a href=&quot;#朴素算法&quot; class=&quot;headerlink&quot; title=&quot;朴素算法&quot;&gt;&lt;/a&gt;朴素算法&lt;/h1&gt;&lt;p&gt;幂计算最简单也最容易想到的算法当然是朴素算法了，不说了，直接看代码&lt;/p&gt;
&lt;figure class=&quot;highlight
      
    
    </summary>
    
    
      <category term="算法" scheme="https://NonCover.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数学" scheme="https://NonCover.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="快速幂" scheme="https://NonCover.github.io/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>非递归遍历二叉树</title>
    <link href="https://noncover.github.io/2020/05/05/%E9%9D%9E%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://noncover.github.io/2020/05/05/%E9%9D%9E%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-05-05T06:29:12.000Z</published>
    <updated>2020-05-05T06:30:20.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天在力扣做题时，看见了用前中后的方式来遍历二叉树的节点，不弱题目要求的是用非递归的形式来求解，不过以前我写的是用递归方式。所以在这儿做个笔记。</p><h1 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://lock2016.xyz/static/ckeditor/ckeditor/plugins/smiley/images/wink_smile.png" alt="wink" title="">                </div>                <div class="image-caption">wink</div>            </figure></h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>其实思路很简单，回想递归法，我们每次先依次遍历左字树，再右子树，当前节点存在的话，我们就打印出当前节点，然后继续递归左右子树。非递归法也差不多，不过我们需要用栈存放每个节点，每次迭代时，取出栈顶元素即可，注意我们这里，入栈时是先入右子树 再是 左子树，因为我们栈的特点是先进后出，所以要后方左子树</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dlr</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="string">"""前序遍历"""</span></span><br><span class="line">    ans = []</span><br><span class="line">    st = []  <span class="comment">## 栈</span></span><br><span class="line">    <span class="keyword">if</span> root: st.append(root)</span><br><span class="line">    <span class="keyword">while</span> st:</span><br><span class="line">        node = st.pop()</span><br><span class="line">        ans.append(node.val)</span><br><span class="line">        <span class="keyword">if</span> node.right: st.append(node.right)</span><br><span class="line">        <span class="keyword">if</span> node.left: st.append(node.left)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></tbody></table></figure><h1 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://lock2016.xyz/static/ckeditor/ckeditor/plugins/smiley/images/confused_smile.png" alt="frown" title="">                </div>                <div class="image-caption">frown</div>            </figure></h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>再回想递归法，我们是先递归左子树，直到为空时，我们再打印出节点，然后继续递归右子树。那么如何用迭代来打印出中序遍历的每一个节点，当然也要用到栈这一数据结构（Python直接用列表来模拟栈），我们需要curr这一指针来指向当前需要打印的节点，由于要先递归左子树，所以我们先要迭代出当前节点的所有左子树放入栈当中去，直到为空后，我们再取出栈顶元素，最后我们curr指针指向当前栈顶元素的右子树，继续迭代。</p><ol><li>迭代curr指针指向节点的左子树放入栈中，直到节点为空</li><li>打印栈顶节点，更新curr指针到当前打印节点的右子树</li><li>重复1，2步，直到栈为空</li></ol><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ldr</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="string">"""中序遍历"""</span></span><br><span class="line">    ans = []</span><br><span class="line">    st = []</span><br><span class="line">    curr = root</span><br><span class="line">    <span class="keyword">while</span> curr <span class="keyword">or</span> st:</span><br><span class="line">        <span class="keyword">while</span> curr:</span><br><span class="line">            st.append(curr)</span><br><span class="line">            curr = curr.left</span><br><span class="line">        curr = st.pop()</span><br><span class="line">        ans.append(curr.val)</span><br><span class="line">        curr = curr.right</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></tbody></table></figure><h1 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://lock2016.xyz/static/ckeditor/ckeditor/plugins/smiley/images/shades_smile.png" alt="cool" title="">                </div>                <div class="image-caption">cool</div>            </figure></h1><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>和前序遍历差不多，交换前序遍历代码中的9，10行代码。注意我们每次打印每个节点，需要将每个节点值插入到结果数组的首位。这是因为我们其实每次取元素时，是按照二叉树从上到下，从右到左来取的，所以只需要把结果数组倒转来，从下到上、从左到右即可。</p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lrd</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="string">"""后序遍历"""</span></span><br><span class="line">    ans = []</span><br><span class="line">    st = []</span><br><span class="line">    <span class="keyword">if</span> root: st.append(root)</span><br><span class="line">    <span class="keyword">while</span> st:</span><br><span class="line">        node = st.pop()</span><br><span class="line">        ans.insert(<span class="number">0</span>, node.val)</span><br><span class="line">        <span class="keyword">if</span> node.left: st.append(node.left)</span><br><span class="line">        <span class="keyword">if</span> node.right: st.append(node.right)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天在力扣做题时，看见了用前中后的方式来遍历二叉树的节点，不弱题目要求的是用非递归的形式来求解，不过以前我写的是用递归方式。所以在这儿做个笔
      
    
    </summary>
    
    
      <category term="算法" scheme="https://NonCover.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://NonCover.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="二叉树" scheme="https://NonCover.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="迭代法" scheme="https://NonCover.github.io/tags/%E8%BF%AD%E4%BB%A3%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>桶排序</title>
    <link href="https://noncover.github.io/2020/04/28/%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    <id>https://noncover.github.io/2020/04/28/%E6%A1%B6%E6%8E%92%E5%BA%8F/</id>
    <published>2020-04-28T12:09:15.000Z</published>
    <updated>2020-04-28T12:15:24.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="桶排序最简单最快的排序方法"><a href="#桶排序最简单最快的排序方法" class="headerlink" title="桶排序最简单最快的排序方法"></a>桶排序最简单最快的排序方法</h2><h2 id="假定有五个人，他们身上分别由，-5，-3，-1，-5，-7元钱，那么我们如何将这五个从小到大来排序？"><a href="#假定有五个人，他们身上分别由，-5，-3，-1，-5，-7元钱，那么我们如何将这五个从小到大来排序？" class="headerlink" title="假定有五个人，他们身上分别由， 5， 3， 1， 5， 7元钱，那么我们如何将这五个从小到大来排序？"></a>假定有五个人，他们身上分别由， 5， 3， 1， 5， 7元钱，那么我们如何将这五个从小到大来排序？</h2><h2 id="没错，我们要实现这个算法就要用到最简单，最快的一种排序方式——计数排序，所用到的算法思想来自于桶排序"><a href="#没错，我们要实现这个算法就要用到最简单，最快的一种排序方式——计数排序，所用到的算法思想来自于桶排序" class="headerlink" title="没错，我们要实现这个算法就要用到最简单，最快的一种排序方式——计数排序，所用到的算法思想来自于桶排序"></a>没错，我们要实现这个算法就要用到最简单，最快的一种排序方式——计数排序，所用到的算法思想来自于桶排序</h2><p>核心思想就离不开这个桶字。</p><p>假设我们面前有10个桶，我们可以把它看作一个内存空间为10的数组</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int arrs[10]; // 代表10个桶</span><br></pre></td></tr></tbody></table></figure><p>我们将这10个桶编号从 a[0] –&gt; a[9]，并且从一开始这10个桶里什么东西都没有，视为0</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 初始化数组为0</span><br><span class="line">for (int i = 0; i &lt;= 10; i++)</span><br><span class="line">{</span><br><span class="line">    a[i] = 0; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="http://wiki.jikexueyuan.com/project/easy-learn-algorithm/images/1.8.png" alt="img"></p><p>网络图片</p><p>然后，我们依次读取这五个人身上所带的钱。</p><p>有5元钱的，桶编号为5记录一次，</p><p>带3元钱的，编号为3的痛记录一次，</p><p>由于有两个人带了5元钱，所以记录两次。</p><p>依次对这五个人进行记录</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int[] people = {5, 4, 1, 5, 7};</span><br><span class="line">for (auto i : people)</span><br><span class="line">{</span><br><span class="line">arrs[i]++;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>记录完后，我们需要将这五个人带的钱的多少从大到小打印出来</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt;= 10; i++)</span><br><span class="line">{</span><br><span class="line">    while(arrs[i]!=0) </span><br><span class="line">    {</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; " ";</span><br><span class="line">        arrs[i]--;  // 输出完后减一</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样就会打印出 这五个人从小到大排序后的值。</p><p>完整代码如下:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">    int people[5] = {5, 3, 1, 5, 7};</span><br><span class="line">    int buckets[10];    // 定义桶</span><br><span class="line">    for (int i = 0; i &lt;= 10; i++) </span><br><span class="line">    { //1. 初始化桶</span><br><span class="line">        buckets[i] = 0;</span><br><span class="line">    }</span><br><span class="line">    for (auto i : people)</span><br><span class="line">    { //2. 记录</span><br><span class="line">        buckets[i]++;</span><br><span class="line">    }</span><br><span class="line">    for (int i = 0; i &lt;= 10; i++)</span><br><span class="line">    { //3. 打印</span><br><span class="line">        while (buckets[i] != 0)</span><br><span class="line">        {</span><br><span class="line">            std::cout &lt;&lt; i &lt;&lt; " ";</span><br><span class="line">            buckets[i]--;  // 输出完后减一</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果想要从大到小排序，只需要将第3步的循环倒叙遍历即可。</p><p>当然这并不是桶排序，真正的桶排序比这复杂的多，只是用到了桶排序的一种思想而已。<br>时间复杂度O（M+N），对于空间复杂度这里便不说，这场战役只成功一半。</p><hr><p>新手练习写Blog，有错请指教</p><hr><p>output：1 3 5 5 7</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;桶排序最简单最快的排序方法&quot;&gt;&lt;a href=&quot;#桶排序最简单最快的排序方法&quot; class=&quot;headerlink&quot; title=&quot;桶排序最简单最快的排序方法&quot;&gt;&lt;/a&gt;桶排序最简单最快的排序方法&lt;/h2&gt;&lt;h2 id=&quot;假定有五个人，他们身上分别由，-5，-3，
      
    
    </summary>
    
    
      <category term="算法" scheme="https://NonCover.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="https://NonCover.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>约瑟夫环问题</title>
    <link href="https://noncover.github.io/2020/04/27/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98/"/>
    <id>https://noncover.github.io/2020/04/27/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98/</id>
    <published>2020-04-27T12:23:55.000Z</published>
    <updated>2020-04-27T12:26:15.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是约瑟夫环？"><a href="#什么是约瑟夫环？" class="headerlink" title="什么是约瑟夫环？"></a>什么是<a href="https://baike.baidu.com/item/约瑟夫问题/3857719?fr=aladdin" target="_blank" rel="noopener">约瑟夫环</a>？</h1><p>先来简单说一下今天的这一道力扣打卡题|。</p><p>0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</p><p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p><p>当然，我一开始最先想到的解法是模拟删除每一个节点，然后当剩下最后一个节点时就返回 答案。这是最容易也是最简单的一种做法。</p><blockquote><p>arr = [i for i in n]   # 用一个数组来保存这个圆圈的值</p></blockquote><p>​       <img src="http://lock2016.xyz/media/upload/NonCover/2020/03/30/image_kc9mBqN.png" alt="img"></p><p>我们先来思考一下，每次我们删除第3个数</p><p>第一次删除的是 arr[m - 1]  = 2，</p><p>当然我们每一次的删除是基于上一次删除的数 <strong>+3 - 1</strong> 并对当前数组的长度取模才是我们真正需要删除的值。</p><p>代码可以写成：</p><blockquote><p>arr.pop((idx + 3 - 1 ) % len(arr))  # idx是上一次删除的数 </p></blockquote><p>​     <img src="http://lock2016.xyz/media/upload/NonCover/2020/03/30/image_VOARrUM.png" alt="img"></p><p><img src="http://lock2016.xyz/media/upload/NonCover/2020/03/30/image_VGLluX2.png" alt="img"></p><p>完整代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lastRemaining</span><span class="params">(self, n: int, m: int)</span> -&gt; int:</span></span><br><span class="line">        circle = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>):</span><br><span class="line">            idx += m - <span class="number">1</span></span><br><span class="line">            idx %= len(circle)</span><br><span class="line">            circle.pop(idx)</span><br><span class="line">        <span class="keyword">return</span> circle[<span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure><p>时间复杂度：O（n） </p><p>空间复杂度：O（n）</p><h1 id="是否可以优化？"><a href="#是否可以优化？" class="headerlink" title="是否可以优化？"></a>是否可以优化？</h1><p>观察如上代码，我们返回的值是circle[0]，因为我们最后只会删除到只剩一个值，那么这个值的位置肯定在数组第0个。</p><p>​    <img src="http://lock2016.xyz/media/upload/NonCover/2020/03/30/image_Zx2OzCD.png" alt="img"></p><p>观察这张图，我们是否可以通过数组下标0反推到答案3。</p><p>我们试着来推一下。</p><p>我们用 ret 来保存最终答案。其他变量不变</p><p>ret = 0</p><p>第一次反推：ret = 0， ret = (ret + 3) % 2 = 1  </p><p>第二次反推：ret = 1， ret = (ret + 3) % 3 = 1</p><p>第三次反推：ret = 1， ret = (ret + 3) % 4 = 0</p><p>第四次反推：ret = 0， ret = (ret + 3) % 4 = 3</p><p>所以我们从2开始反推到 n + 1次 即可得出最后答案</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lastRemaining</span><span class="params">(self, n: int, m: int)</span> -&gt; int:</span></span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">            ret = (ret + m) % i         <span class="comment"># 反推公式，每次我们删除的数是上一次删除数在数 3个，那么我们 +3 在对当前数组取模就是上一次的位置。</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></tbody></table></figure><p>空间复杂度可以优化到 O（1）</p><p>练习写博客ing，记录每一次收获</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是约瑟夫环？&quot;&gt;&lt;a href=&quot;#什么是约瑟夫环？&quot; class=&quot;headerlink&quot; title=&quot;什么是约瑟夫环？&quot;&gt;&lt;/a&gt;什么是&lt;a href=&quot;https://baike.baidu.com/item/约瑟夫问题/3857719?fr=alad
      
    
    </summary>
    
    
      <category term="算法" scheme="https://NonCover.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="链表" scheme="https://NonCover.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>链表的中点节点simple</title>
    <link href="https://noncover.github.io/2020/04/27/%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E7%82%B9%E8%8A%82%E7%82%B9simple/"/>
    <id>https://noncover.github.io/2020/04/27/%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E7%82%B9%E8%8A%82%E7%82%B9simple/</id>
    <published>2020-04-27T12:09:58.000Z</published>
    <updated>2020-04-27T12:27:00.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快慢指针遍历链表："><a href="#快慢指针遍历链表：" class="headerlink" title="快慢指针遍历链表："></a>快慢指针遍历链表：</h1><p> 因为我们所要返回此链表的中间节点。所以我们要用slow和fast来遍历链表，同时要做到slow所指向的节点始终在头节点到fast节点的中间节点，所以我们要每当slow移动一次的时候，fast要移动两次。当fast指向一个空节点的时候，就返回slow。 </p><p>Python代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x = None)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">middleNode</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        slow = fast = head</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">        <span class="keyword">return</span> slow</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arr2List</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="comment"># 将数组转换成链表</span></span><br><span class="line">    head = ListNode()</span><br><span class="line">    node = ListNode()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head.val:</span><br><span class="line">            node = ListNode(i)</span><br><span class="line">            head = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.next = ListNode(i)</span><br><span class="line">            node = node.next</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    head = arr2List(arr)</span><br><span class="line">    out = Solution().middleNode(head)</span><br><span class="line">    print(out.val)</span><br><span class="line"><span class="comment"># 时间复杂度：O（N）</span></span><br><span class="line"><span class="comment"># 空间复杂度：O（1）</span></span><br></pre></td></tr></tbody></table></figure><hr><img src="img\avatar.jpg" alt="rm-bg" style="zoom: 25%;"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      随便搬点东西
    
    </summary>
    
    
      <category term="算法" scheme="https://NonCover.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="链表" scheme="https://NonCover.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="指针" scheme="https://NonCover.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>不正式的文章</title>
    <link href="https://noncover.github.io/2020/04/24/%E4%B8%8D%E6%AD%A3%E5%BC%8F%E7%9A%84%E6%96%87%E7%AB%A0/"/>
    <id>https://noncover.github.io/2020/04/24/%E4%B8%8D%E6%AD%A3%E5%BC%8F%E7%9A%84%E6%96%87%E7%AB%A0/</id>
    <published>2020-04-24T13:18:10.000Z</published>
    <updated>2020-04-24T14:20:04.244Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="虽然没啥人看"><a href="#虽然没啥人看" class="headerlink" title="虽然没啥人看"></a>虽然没啥人看</h1><h1 id="关于blog"><a href="#关于blog" class="headerlink" title="关于blog"></a>关于blog</h1><ol><li>学习</li><li>记代码</li><li>偶尔写点算法题</li><li>装逼</li><li>来电色图</li></ol><h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><ol><li>垃圾大学</li><li>程序员（个人比较偏后端（<strong>java、python</strong>）开发）</li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>本人的其他网站（由于懒得维护，就放在哪了） -》》》》》 <a href="http://lock2016.xyz" target="_blank" rel="noopener" title="这儿">这儿</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;虽然没啥人看&quot;&gt;&lt;a href=&quot;#虽然没啥人看&quot; class=&quot;headerlink&quot; title=&quot;虽然没啥人看&quot;&gt;&lt;/a&gt;虽然没啥人看&lt;/h1&gt;&lt;h1 id=&quot;关于blog&quot;&gt;&lt;a href=&quot;#关于blog&quot; class
      
    
    </summary>
    
    
      <category term="随便写点" scheme="https://NonCover.github.io/categories/%E9%9A%8F%E4%BE%BF%E5%86%99%E7%82%B9/"/>
    
    
      <category term="一些话" scheme="https://NonCover.github.io/tags/%E4%B8%80%E4%BA%9B%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://noncover.github.io/2020/04/24/hello-world/"/>
    <id>https://noncover.github.io/2020/04/24/hello-world/</id>
    <published>2020-04-24T09:24:05.413Z</published>
    <updated>2020-04-24T09:24:05.413Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
