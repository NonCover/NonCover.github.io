<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>noc的手记</title>
  
  <subtitle>hello world</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://noncover.github.io/"/>
  <updated>2020-04-27T12:26:15.233Z</updated>
  <id>https://noncover.github.io/</id>
  
  <author>
    <name>NonCover</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>约瑟夫环问题</title>
    <link href="https://noncover.github.io/2020/04/27/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98/"/>
    <id>https://noncover.github.io/2020/04/27/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98/</id>
    <published>2020-04-27T12:23:55.000Z</published>
    <updated>2020-04-27T12:26:15.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是约瑟夫环？"><a href="#什么是约瑟夫环？" class="headerlink" title="什么是约瑟夫环？"></a>什么是<a href="https://baike.baidu.com/item/约瑟夫问题/3857719?fr=aladdin" target="_blank" rel="noopener">约瑟夫环</a>？</h1><p>先来简单说一下今天的这一道力扣打卡题|。</p><p>0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</p><p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p><p>当然，我一开始最先想到的解法是模拟删除每一个节点，然后当剩下最后一个节点时就返回 答案。这是最容易也是最简单的一种做法。</p><blockquote><p>arr = [i for i in n]   # 用一个数组来保存这个圆圈的值</p></blockquote><p>​       <img src="http://lock2016.xyz/media/upload/NonCover/2020/03/30/image_kc9mBqN.png" alt="img"></p><p>我们先来思考一下，每次我们删除第3个数</p><p>第一次删除的是 arr[m - 1]  = 2，</p><p>当然我们每一次的删除是基于上一次删除的数 <strong>+3 - 1</strong> 并对当前数组的长度取模才是我们真正需要删除的值。</p><p>代码可以写成：</p><blockquote><p>arr.pop((idx + 3 - 1 ) % len(arr))  # idx是上一次删除的数 </p></blockquote><p>​     <img src="http://lock2016.xyz/media/upload/NonCover/2020/03/30/image_VOARrUM.png" alt="img"></p><p><img src="http://lock2016.xyz/media/upload/NonCover/2020/03/30/image_VGLluX2.png" alt="img"></p><p>完整代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lastRemaining</span><span class="params">(self, n: int, m: int)</span> -&gt; int:</span></span><br><span class="line">        circle = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>):</span><br><span class="line">            idx += m - <span class="number">1</span></span><br><span class="line">            idx %= len(circle)</span><br><span class="line">            circle.pop(idx)</span><br><span class="line">        <span class="keyword">return</span> circle[<span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure><p>时间复杂度：O（n） </p><p>空间复杂度：O（n）</p><h1 id="是否可以优化？"><a href="#是否可以优化？" class="headerlink" title="是否可以优化？"></a>是否可以优化？</h1><p>观察如上代码，我们返回的值是circle[0]，因为我们最后只会删除到只剩一个值，那么这个值的位置肯定在数组第0个。</p><p>​    <img src="http://lock2016.xyz/media/upload/NonCover/2020/03/30/image_Zx2OzCD.png" alt="img"></p><p>观察这张图，我们是否可以通过数组下标0反推到答案3。</p><p>我们试着来推一下。</p><p>我们用 ret 来保存最终答案。其他变量不变</p><p>ret = 0</p><p>第一次反推：ret = 0， ret = (ret + 3) % 2 = 1  </p><p>第二次反推：ret = 1， ret = (ret + 3) % 3 = 1</p><p>第三次反推：ret = 1， ret = (ret + 3) % 4 = 0</p><p>第四次反推：ret = 0， ret = (ret + 3) % 4 = 3</p><p>所以我们从2开始反推到 n + 1次 即可得出最后答案</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lastRemaining</span><span class="params">(self, n: int, m: int)</span> -&gt; int:</span></span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">            ret = (ret + m) % i         <span class="comment"># 反推公式，每次我们删除的数是上一次删除数在数 3个，那么我们 +3 在对当前数组取模就是上一次的位置。</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></tbody></table></figure><p>空间复杂度可以优化到 O（1）</p><p>练习写博客ing，记录每一次收获</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是约瑟夫环？&quot;&gt;&lt;a href=&quot;#什么是约瑟夫环？&quot; class=&quot;headerlink&quot; title=&quot;什么是约瑟夫环？&quot;&gt;&lt;/a&gt;什么是&lt;a href=&quot;https://baike.baidu.com/item/约瑟夫问题/3857719?fr=alad
      
    
    </summary>
    
    
      <category term="算法" scheme="https://NonCover.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="链表" scheme="https://NonCover.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>链表的中点节点simple</title>
    <link href="https://noncover.github.io/2020/04/27/%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E7%82%B9%E8%8A%82%E7%82%B9simple/"/>
    <id>https://noncover.github.io/2020/04/27/%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E7%82%B9%E8%8A%82%E7%82%B9simple/</id>
    <published>2020-04-27T12:09:58.000Z</published>
    <updated>2020-04-27T12:27:00.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快慢指针遍历链表："><a href="#快慢指针遍历链表：" class="headerlink" title="快慢指针遍历链表："></a>快慢指针遍历链表：</h1><p> 因为我们所要返回此链表的中间节点。所以我们要用slow和fast来遍历链表，同时要做到slow所指向的节点始终在头节点到fast节点的中间节点，所以我们要每当slow移动一次的时候，fast要移动两次。当fast指向一个空节点的时候，就返回slow。 </p><p>Python代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x = None)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">middleNode</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        slow = fast = head</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">        <span class="keyword">return</span> slow</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arr2List</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="comment"># 将数组转换成链表</span></span><br><span class="line">    head = ListNode()</span><br><span class="line">    node = ListNode()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head.val:</span><br><span class="line">            node = ListNode(i)</span><br><span class="line">            head = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.next = ListNode(i)</span><br><span class="line">            node = node.next</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    head = arr2List(arr)</span><br><span class="line">    out = Solution().middleNode(head)</span><br><span class="line">    print(out.val)</span><br><span class="line"><span class="comment"># 时间复杂度：O（N）</span></span><br><span class="line"><span class="comment"># 空间复杂度：O（1）</span></span><br></pre></td></tr></tbody></table></figure><hr><img src="img\avatar.jpg" alt="rm-bg" style="zoom: 25%;"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      随便搬点东西
    
    </summary>
    
    
      <category term="算法" scheme="https://NonCover.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="链表" scheme="https://NonCover.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="指针" scheme="https://NonCover.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>不正式的文章</title>
    <link href="https://noncover.github.io/2020/04/24/%E4%B8%8D%E6%AD%A3%E5%BC%8F%E7%9A%84%E6%96%87%E7%AB%A0/"/>
    <id>https://noncover.github.io/2020/04/24/%E4%B8%8D%E6%AD%A3%E5%BC%8F%E7%9A%84%E6%96%87%E7%AB%A0/</id>
    <published>2020-04-24T13:18:10.000Z</published>
    <updated>2020-04-24T14:20:04.244Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="虽然没啥人看"><a href="#虽然没啥人看" class="headerlink" title="虽然没啥人看"></a>虽然没啥人看</h1><h1 id="关于blog"><a href="#关于blog" class="headerlink" title="关于blog"></a>关于blog</h1><ol><li>学习</li><li>记代码</li><li>偶尔写点算法题</li><li>装逼</li><li>来电色图</li></ol><h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><ol><li>垃圾大学</li><li>程序员（个人比较偏后端（<strong>java、python</strong>）开发）</li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>本人的其他网站（由于懒得维护，就放在哪了） -》》》》》 <a href="http://lock2016.xyz" target="_blank" rel="noopener" title="这儿">这儿</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;虽然没啥人看&quot;&gt;&lt;a href=&quot;#虽然没啥人看&quot; class=&quot;headerlink&quot; title=&quot;虽然没啥人看&quot;&gt;&lt;/a&gt;虽然没啥人看&lt;/h1&gt;&lt;h1 id=&quot;关于blog&quot;&gt;&lt;a href=&quot;#关于blog&quot; class
      
    
    </summary>
    
    
      <category term="随便写点" scheme="https://NonCover.github.io/categories/%E9%9A%8F%E4%BE%BF%E5%86%99%E7%82%B9/"/>
    
    
      <category term="一些话" scheme="https://NonCover.github.io/tags/%E4%B8%80%E4%BA%9B%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://noncover.github.io/2020/04/24/hello-world/"/>
    <id>https://noncover.github.io/2020/04/24/hello-world/</id>
    <published>2020-04-24T09:24:05.413Z</published>
    <updated>2020-04-24T09:24:05.413Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
